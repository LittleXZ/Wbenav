{"mappings":"AAAA,qBAAS;AACG,SAAH,KAAK,CAAC,GAAG,EAAE;IAChB,MAAM,QAAQ,4NAU+B,AAAC,EAAA,4DAAwB;IAClC,MAA9B,EAAE,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,GAAG,CAAC,AAAC,EAAC,qBAAS;IACnC,IAAR,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EACvB,OAAO,IAAI,CAAC;IAEhB,OAAO,KAAK,CAAC;CAChB;AAED,eAAe;AACf,IAAI,OAAO,GAAG,EAAE;AAEhB,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,IAAM;IAC3B,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,8BAAU,CAAqB,CAAC;IACrC,IAAhB,OAAO;IACX,IAAI,QAAQ;IACZ,IAAI,GAAG,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;QAC/C,OAAO,GAAG,CAAC,QAAQ,CAAC,GAAG,GAAG,AA5BlC;QA6BQ,QAAQ,GAAG,GAAG,AA7BtB;KA8BK,MAAM;QACH,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC,CACjC,OAAO,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CACtB,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,AAjChC;QAkCQ,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,AAlCrC;KAmCK;IACD,IAAI,KAAK,CAAC,GAAG,CAAC,EAAE;QACZ,IAAI,OAAO,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QAC1B,IAAI,QAAQ,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;QAC5B,QAAQ,CAAC,IAAI,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,EAAE,AAvCjD;QAwCQ,OAAO,CAAC,IAAI,CAAC;YAAC,IAAI,EAAC,OAAO;YAAC,GAAG,EAAC,QAAQ;SAAC,CAAC,AAxCjD;QAyCQ,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,GAAK;YACtB,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;;;+CAGqB,EAAE,IAAI,CAAC,IAAI,CAAC;;;wBAGnC,EAAE,IAAI,CAAC,GAAG,CAAC;;;;;;;qBAOd,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC;SACpC,CAAC,AAxDV;KAyDK,MACG,KAAK,CAAC,0BAAU,CAAC,AA1DzB;CA4DC,CAAC,AA5DF","sources":["project/web-nav/src/main.js"],"sourcesContent":["// 网址正则匹配\r\nfunction isURL(url) {\r\n    const strRegex = '^((https|http|ftp)://)?'//(https或http或ftp):// 可有可无\r\n        + '(([\\\\w_!~*\\'()\\\\.&=+$%-]+: )?[\\\\w_!~*\\'()\\\\.&=+$%-]+@)?' //ftp的user@ 可有可无\r\n        + '(([0-9]{1,3}\\\\.){3}[0-9]{1,3}' // IP形式的URL- 3位数字.3位数字.3位数字.3位数字\r\n        + '|' // 允许IP和DOMAIN（域名）\r\n        + '(localhost)|'    //匹配localhost\r\n        + '([\\\\w_!~*\\'()-]+\\\\.)*' // 域名- 至少一个[英文或数字_!~*\\'()-]加上.\r\n        + '\\\\w+\\\\.' // 一级域名 -英文或数字 加上.\r\n        + '[a-zA-Z]{1,6})' // 顶级域名- 1-6位英文\r\n        + '(:[0-9]{1,5})?' // 端口- :80 ,1-5位数字\r\n        + '((/?)|' // url无参数结尾 - 斜杆或这没有\r\n        + '(/[\\\\w_!~*\\'()\\\\.;?:@&=+$,%#-]+)+/?)$';//请求参数结尾- 英文或数字和[]内的各种字符\r\n    const re = new RegExp(strRegex, 'i'); // 大小写不敏感\r\n    if (re.test(encodeURI(url))) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n// localStorage\r\nlet hashMap = []\r\n\r\n$('.tagAdd').on('click', () => {\r\n    let url = window.prompt(`请输入你要添加的网址`)\r\n    let longurl\r\n    let shorturl\r\n    if (url.indexOf(`http` || `https` || `ftp`) !== 0) {\r\n        longurl = `https://` + url\r\n        shorturl = url\r\n    } else {\r\n        shorturl = url.replace(`https://`, ``)\r\n            .replace(`http://`, ``)\r\n            .replace(`www.`, ``)\r\n        console.log(shorturl + `333`)\r\n    }\r\n    if (isURL(url)) {\r\n        let $tagAdd = $(`.tagAdd`)\r\n        let $tagList = $(`.tagList`)\r\n        $tagList.find(`.tag:not(.last)`).remove()\r\n        hashMap.push({logo:longurl,url:shorturl})\r\n        hashMap.forEach((node) => {\r\n            let $tag = $(`\r\n                <li class=\"tag tagStyle\">\r\n                    <div class=\"webLogo\">\r\n                    <img src=\"chrome://favicon/${node.logo}\" alt=\"\">\r\n                    </div>\r\n                    <div class=\"webUrl\">\r\n                        ${node.url}\r\n                    </div>\r\n                    <div class=\"close\">\r\n                        <svg class=\"icon\" aria-hidden=\"true\">\r\n                            <use xlink:href=\"#icon-close\"></use>\r\n                        </svg>\r\n                    </div>\r\n                </li>`).insertBefore($tagAdd)\r\n        })\r\n    } else {\r\n        alert('请输入正确的网址')\r\n    }\r\n})"],"names":[],"version":3,"file":"index.4d564a8f.js.map","sourceRoot":"/__parcel_source_root/"}